//This will be the master file for our class
//Please make sure that the code makes sense and you clean it up well!

int panicButton = 0;  //variable for the panic button (location)

int backLights = 1;   //variable for back lights (location)
int frontLights = 2;  //variable for front lights (location)

byte leds = 0;        //variable for lights

boolean soundOn = true; //variable for whether or not the sound is on; "= true;" TO BE DELETED

int sound = 3;        //variable of PIN where the sound is located
int tones = 261;      //TO BE DELETED

boolean servoSpin = false;  //variable for whether or not the motor should be spinning; "= false;" TO BE DELETED

int servoPin = 4;     //variable for the motor
 
Servo servo;          //registers a servo motor

int angle = 0;        //servo position (degrees)


//start declare for RyanPerkins
int inPin = 2;         // the number of the input pin
int outPin = 12;       // the number of the output pin


int state = HIGH;      // the current state of the output pin
int reading;           // the current reading from the input pin
int previous = LOW;    // the previous reading from the input pin

// the follow variables are long's because the time, measured in miliseconds,
// will quickly become a bigger number than can be stored in an int.
long time = 0;         // the last time the output pin was toggled
long debounce = 200;   // the debounce time, increase if the output flickers
//end declare for RyanPerkins




/*
Group MFCJ declaration based off Adafruit Arduino - Lesson 6. Inputs
*/

#include <Servo.h>
  
  Servo myservo;  // create servo object to control a servo
                  // a maximum of eight servo objects can be created
  
  const int VRx_pin = 0; // Analog pin A0 connected X to output
  const int VRy_pin = 1; // Analog pin A1 connected Y to output
  const int SW_pin = 2; // Analog pin A0 connected X to output
  const int SG90 = 9; //Analog pin A3 connected to myservo
  int pos = 0;    // variable to store the servo position
  
//End of Group MFCJ declaration



///////////////////////////////////////////////////////////////////////////////////////////////////////////

// Beginning of declaring variables for sound code

int ledPin = 5; //the led wire is in pin 5 on the arduino
int buttonON = 9; //the wire for the on button is connected to pin 9 on the arduino
int buttonOFF = 8; //the wire for the off button is connected to pin 8 on the arduino
int buttonMUSIC = 10; //the wire for the button that will begin the music is connected to pin 10 on the arduino
int speakerPin = 2; //the wire for the buzzer is connected to pin 2

int numTones = 2; //2 total tones played
int numTones2 = 5; //5 total tones played 

int toneUP[]= {2000, 2200}; //tone frequencies
int toneDOWN[] = {2200, 2000}; //tone frequencies
int toneMUSIC[] = {1500, 1700, 1900, 2100, 2300}; //tone frequencies

bool x; //boolean labelled as x
bool y; //boolean labelled as y

byte leds = 0; //

// End of declaring variables for sound code

/*OG Squad declarations*/

const int ProjectorButtonPin = 2;
// the number of the pushbutton pin
const int ProjectorPin = 13;
int ProjectorState = HIGH; 
// the current state of the output pin int ProjectorButtonState; 
// the current reading from the input pin 
int lastProjectorButtonState = LOW; 
// the previous reading from the input pin

// the following variables are long's because the time, measured in miliseconds, 
// will quickly become a bigger number than can be stored in an int. 
long lastDebounceTime = 0;
// the last time the output pin was toggled 
long debounceDelay = 50; 
// the debounce time; increase if the output flickers


The circuit:
LED attached from pin 13 to ground
pushbutton attached from pin 2 to +5V
10K resistor attached from pin 2 to ground

This example code is in the public domain.

//End OF OG SQUAD DECLARATIONS

///////////////////////////////////////////////////////////////////////////////////////////////////////////
 
void setup() 
{
//start setup for RyanPerkins
pinMode(inPin, INPUT);
  pinMode(outPin, OUTPUT);
//end setup for RyanPerkins

pinMode(panicButton, INPUT_PULLUP);   //Register the panic button as an input
  pinMode(backLights, OUTPUT);          //Register the back lights as an output
  pinMode(frontLights, OUTPUT);         //Register the front lights as an output
  servo.attach(servoPin);               //Register the servo

  digitalWrite(frontLights, HIGH); //TO BE DELETED
  digitalWrite(backLights, HIGH); //TO BE DELETED



pinMode(ProjectorButtonPin, INPUT); pinMode(ProjectorPin, OUTPUT); Serial.begin(9600);

//Beginning of Void setup for group MFCJ

pinMode(SW_pin, INPUT);
   digitalWrite(SW_pin, HIGH);
   Serial.begin(115200);
   myservo.attach(9);  // attaches the servo on pin 9 to the servo object 
   
//End of void setup for group MFCJ
   
///////////////////////////////////////////////////////////////////////////////////////////////////////////

// Beginning of void setup for sound code (main code)

  pinMode(ledPin, OUTPUT); // the led is the output
  pinMode(buttonON, INPUT_PULLUP); // the first button to turn on the circuit is the input
  pinMode(buttonOFF, INPUT_PULLUP); // the next button to turn off the circuit is another input
  pinMode(buttonMUSIC, INPUT_PULLUP); // the last button to play a scale is another input
  x = false; //boolean set up as false 
  y = false;  //boolean set up as false 
}
 
// End of void setup for sound code


///////////////////////////////////////////////////////////////////////////////////////////////////////////

//BEGINNING OF OG SQUAD VOID SETUP

pinMode(ProjectorButtonPin, INPUT); 
pinMode(ProjectorPin, OUTPUT); 
Serial.begin(9600); 

//END OF OG SQUAD VOID SETUP

///////////////////////////////////////////////////////////////////////////////////////////////////////////
 
void loop() 
{
  // Beginning of void loop for sound code 
  
  if ((digitalRead(buttonON) == LOW) &&  (x == false)) // if the button is off on pin number 9         
  {for (int i = 0; i < numTones; i++) // plays 1 through 2: plays 1 and adds a value (1) to play 2
  {
    tone(speakerPin, toneUP[i]); //plays the two tones from ToneUP [2000,2200]
    delay(200); // causes a 200 milisecond delay
  }
    noTone(speakerPin);  //stops playing the tones
  
{
  delay(200); // another 200 milisecond delay
  digitalWrite(ledPin, HIGH); // turns the led on
  x = true; // sets Boolean x to true
  y = true; // sets Boolean y to true
}
    
    if ((digitalRead(buttonMUSIC) == LOW) && (x == true) && (y == true))//if buttonMUSIC hasn't been pushed and the led is on

{for (int a = 0; a < numTones2; a++) //plays tones 1 through 5 in numtones2: plays 1 and adds a value (1) to play tone 2, 3, 4, then 5
  {
    tone(speakerPin, toneMUSIC[a]); //plays the tones outloud on the speaker
    delay(200); //200 milisecond delay 
  }

  {
    delay(200); //200 milisecond delay
    digitalWrite(ledPin, HIGH); //led stays on
    y = false; // boolean y becomes false
}
   
}
  
  if ((digitalRead(buttonOFF) == LOW) &&  (x == true)) // if buttonOff hasn't been pushed and Boolean x = true

 {for (int e = 0; e < numTones; e++) // plays tones 1 through 2: plays 1 tone and adds a value (1) to play the second tone
  {
    tone(speakerPin, toneDOWN[e]); //play the two toneDOWN tones outloud
    delay(200); //200 milisecond delay
  }
  noTone(speakerPin); //stops playing sounds


   {
     delay(200); //200 second delay
    digitalWrite(ledPin, LOW); //turns the led off
     x = false; //sets Boolean x to off
     y = true; //boolean y becomes true
   }
}

// End of void loop for sound code (main code)

////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Beginning of OG Squad Void loop

// read the state of the switch into a local variable: 
int reading = digitalRead(ProjectorButtonPin);



// check to see if you just pressed the button 
// (i.e. the input went from LOW to HIGH), and you've waited 
// long enough since the last press to ignore any noise:
// If the switch changed, due to noise or pressing: 
if (reading != lastProjectorButtonState) 
{ // reset the debouncing timer lastDebounceTime = millis();

// this is all that's new to the code 
// toggles the ledState variable each time the button is pressed 
if (ProjectorButtonState == HIGH) { ProjectorState = !ProjectorState; Serial.println(ProjectorState); } }



if ((millis() - lastDebounceTime) > debounceDelay) { 
// whatever the reading is at, it's been there for longer 
// than the debounce delay, so take it as the actual current state: 
ProjectorButtonState = reading; }



// set the LED using the state of the button: 
digitalWrite(ProjectorPin, ProjectorState);

// save the reading. Next time through the loop, 
// it'll be the lastButtonState: 
lastProjectorButtonState = reading; }


///////////////////////////////////////////////////////////////////////////////////////////////////////////

//Beginning of void loop for group MFCJ code

  Serial.print("Switch: ");             //the name switch appears on the serial monitor
    Serial.print(digitalRead(SW_pin));    //shows the switch on the serial monitor
    Serial.print("\n");
    Serial.print("X-axis: ");             //the name X-axis appears on the serial monitor
    Serial.print(analogRead(VRx_pin));    //shows the X coordonate on the serial monitor
    Serial.print("\n");
    Serial.print("Y-axis: ");             //the name Y-Axis appears on the serial monitor
    Serial.println(analogRead(VRy_pin));  //shows the Y coordonate on the serial monitor
    Serial.print("\n");
    delay(100);
  
    if (analogRead(VRy_pin) < 450){  //If the analog stick is pushed down, the servo will move to the right by 10
      
    myservo.write(pos);
    pos -= 10;
  }
    else if (analogRead(VRy_pin) > 550){  //If the analog stick is pushed up, the servo will move to the left by 10
  
    myservo.write(pos); 
    pos += 10;}
// read the state of the switch into a local variable: int reading = digitalRead(ProjectorButtonPin);

//End of group MFCJ void loop

// check to see if you just pressed the button // (i.e. the input went from LOW to HIGH), and you've waited // long enough since the last press to ignore any noise:

// If the switch changed, due to noise or pressing: if (reading != lastProjectorButtonState) { // reset the debouncing timer lastDebounceTime = millis();

// this is all that's new to the code // toggles the ledState variable each time the button is pressed if (ProjectorButtonState == HIGH) { ProjectorState = !ProjectorState; Serial.println(ProjectorState); } }



if ((millis() - lastDebounceTime) > debounceDelay) { // whatever the reading is at, it's been there for longer // than the debounce delay, so take it as the actual current state: ProjectorButtonState = reading; }



// set the LED using the state of the button: digitalWrite(ProjectorPin, ProjectorState);

// save the reading. Next time through the loop, // it'll be the lastButtonState: lastProjectorButtonState = reading; 

if (digitalRead(panicButton) == LOW){   //When the panic button is pressed
    digitalWrite(backLights, LOW);        //Turn off the back lights
    digitalWrite(frontLights, LOW);       //Turn off the front lights
    noTone(sound);                        //Turn the sound off
    soundOn = false;                      //Make sure the sound stays off
    servoSpin = true;                     //Start the motor spin
  }

  if (servoSpin == true){
    Spin();                               //Make the motor spin if it's supposed to
  }
  
  if (digitalRead(panicButton) == HIGH){  //If the panic button has not been pressed
    if (soundOn == true){                 //If the sound is on,
      noTone(sound);
      tone(sound, tones, 100);            //Play the current sound
    }
  }
}

void Spin(){
  for(int i; i < 180; i++){
    servo.write(i);                       //Rotate the motor 180 degrees (counterclockwise)
    delay(10);
  }
  servo.write(0);                         //And repeat
// start loop for RyanPerkins
reading = digitalRead(inPin);

  // if the input just went from LOW and HIGH and we've waited long enough
  // to ignore any noise on the circuit, toggle the output pin and remember
  // the time
  if (reading == HIGH && previous == LOW && millis() - time > debounce) {
    if (state == HIGH)
      state = LOW;
    else
      state = HIGH;

    time = millis();    
  }

  digitalWrite(outPin, state);

  previous = reading;
//end Loop for RyanPerkins
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
